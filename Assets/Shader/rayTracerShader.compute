// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

static const float PI = 3.141592f;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float _GroundPlane;

struct Sphere
{
	float3 position;
	float radius;
	float3 albedo;
	float3 specular;
};

StructuredBuffer<Sphere> _Spheres;

int nbBounces;
float4 _DirectionalLight;
float2 _PixelOffset;

////////////////////////////////////////////////////////
//
//
//				Ray creation function
//
//

struct Ray
{
	float3 origin;
	float3 direction;
	float3 energy;
};


Ray CreateRay(float3 origin, float3 direction)
{
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	ray.energy = float3(1.f, 1.f, 1.f);
	return ray;
}

Ray CreateCameraRay(float2 uv)
{
	float3 origin = mul(_CameraToWorld, float4(0.f, 0.f, 0.f, 1.f)).xyz;

	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.f)).xyz;

	direction = mul(_CameraToWorld, float4(direction, 0.f)).xyz;
	direction = normalize(direction);

	return CreateRay(origin, direction);
}

struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
	float3 albedo;
	float3 specular;
};

RayHit createRayHit()
{
	RayHit hit;
	hit.position = float3(0.f, 0.f, 0.f);
	hit.distance = 1.#INF;
	hit.normal = float3(0.f, 0.f, 0.f);
	hit.albedo = float3(0.0f, 0.0f, 0.0f);
	hit.specular = float3(0.0f, 0.0f, 0.0f);

	return hit;
}

////////////////////////////////////////////////////////
//
//
//				Intersectiong function
//
//

void intersectGroundPlane(Ray ray, inout RayHit bestHit)
{
	float t = -(ray.origin.y - _GroundPlane)/ray.direction.y;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = float3(0.f, 1.f, 0.f);
		bestHit.albedo = 0.8f;
		bestHit.specular = 0.03f;
	}
}

void IntersectSphere(Ray ray, inout RayHit bestHit, uint i)
{
	// Calculate distance along the ray where the sphere is intersected
	Sphere sphere = _Spheres[i];
	float3 d = ray.origin - sphere.position;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
	if (p2sqr < 0)
		return;
	float p2 = sqrt(p2sqr);
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = normalize(bestHit.position - sphere.position);
		bestHit.albedo = sphere.albedo;
		bestHit.specular = sphere.specular;
	}
}

static const float EPSILON = 1e-8;

bool intersectTriangle_MT97(Ray ray, float3 vert0, float3 vert1, float3 vert2, inout float t, inout float u, inout float v)
{
	float3 edge1 = vert1 - vert0;
	float3 edge2 = vert2 - vert0;

	float3 pvec = cross(ray.direction, edge2);

	float det = dot(edge1, pvec);

	if (det < EPSILON)
		return false;
	float inv_det = 1.0f / det;

	float3 tvec = ray.origin - vert0;

	u = dot(tvec, pvec) * inv_det;
	if (u <0.0 || u > 1.0f)
		return false;
	float3 qvec = cross(tvec, edge1);

	v = dot(ray.direction, qvec) * inv_det;
	if (v < 0.0 || u + v > 1.0f)
		return false;

	t = dot(edge2, qvec) * inv_det;

	return true;
}

////////////////////////////////////////////////////////
//
//
//				raytracing function
//
//

RayHit Trace(Ray ray)
{
	RayHit bestHit = createRayHit();
	intersectGroundPlane(ray, bestHit);

	uint numSpheres, stride;
	_Spheres.GetDimensions(numSpheres, stride);
	for (uint i = 0; i < numSpheres; i++)
		IntersectSphere(ray, bestHit, i);

	float3 v0 = float3(-150, 0, -150);
	float3 v1 = float3(150, 0, -150);
	float3 v2 = float3(0, 150 * sqrt(2), -150);
	float t, u, v;
	if (intersectTriangle_MT97(ray, v0, v1, v2, t, u, v))
	{
		if (t > 0 && t < bestHit.distance)
		{
			bestHit.distance = t;
			bestHit.position = ray.origin + t * ray.direction;
			bestHit.normal = normalize(cross(v1 - v0, v2 - v0));
			bestHit.albedo = 0.00f;
			bestHit.specular = 0.65f * float3(1, 0.4f, 0.2f);
		}
	}


	return bestHit;
}

float3 shade(inout Ray ray, RayHit hit)
{
	if (hit.distance < 1.#INF)
	{
		float3 specular = float3(0.1f, 0.1f, 0.1f);
		float3 albedo = float3(0.8f, 0.8f, 0.8f);

		ray.origin = hit.position + hit.normal * 0.001f;
		ray.direction = reflect(ray.direction, hit.normal);
		ray.energy *= hit.specular;

		Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001, -1 * _DirectionalLight.xyz);
		RayHit shadowHit = Trace(shadowRay);
		if (shadowHit.distance != 1.#INF)
		{
			return float3(0.0f, 0.0f, 0.0f);
		}

		 return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * hit.albedo;
	}
	else
	{
		ray.energy = 0.0f;

		float theta = acos(ray.direction.y) / -PI;
		float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;

		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
	}
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	//init and default variable
	uint width, height;
	Result.GetDimensions(width, height);

	float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

	Ray ray = CreateCameraRay(uv);
	
	float3 result = float3(0, 0, 0); 
	for (int i = 0; i < 1 + nbBounces; i++)
	{
		RayHit hit = Trace(ray);
		result += ray.energy * shade(ray, hit);

		if (!any(ray.energy))
			break;
	}
	Result[id.xy] = float4(result, 1);
}